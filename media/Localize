var childWindows = [];

function showClickFeedbackMessage(text, x, y, duration) {
    var $message = $("<div class='clickFeedbackMessage noselect'>" + text + "</div>");
    $message.appendTo($("body")).hide();
    $message.css({ left: x, top: y });
    $message.fadeIn("fast");
    window.setTimeout(function () {
        $message.fadeOut("fast", function () { $message.remove(); });
    }, duration);
}

function copyableClicked(element) {
    //only copy if we are clicking, not if we have used the mouse to select the text manually.
    var selectedText;
    if (window.getSelection) {
        selectedText = window.getSelection().toString();
    } else if (document.selection && document.selection.type !== "Control") {
        selectedText = document.selection.createRange().text;
    }
    if (selectedText) { return };

    var $element = $(element);
    var text = $element.text();
    $("#copyInput").val(text).select();
    var offset = $element.offset();
    var x = offset.left;
    var y = offset.top - 40;
    try {
        var successful = document.execCommand("copy");
        if (successful) {
            showClickFeedbackMessage("Copied to clipboard", x, y, 2000);
        } else {
            showClickFeedbackMessage("Copying was unsuccessful", x, y, 2000);
        }
    } catch (err) {
        showClickFeedbackMessage("Copying was unsuccessful", x, y, 2000);
        console.log("Unable to copy. " + err);
    }
}

function setupKnowledgeExpanders() {
    $(".knowledge").each(function () {
        var knowledge = this;
        var $knowledge = $(this);
        var $moreKnowledge = $knowledge.next();
        if ($moreKnowledge.is(".moreKnowledge")) {
            var maxHeight = 100;
            var leeway = 100;
            var diff = knowledge.scrollHeight - maxHeight;
            if (diff < leeway) {
                $knowledge.removeClass("collapsed");
                $moreKnowledge.find("a").hide();
            } else {
                //this is tall content, let's show the 'more' link
                $moreKnowledge.find("a").show();
                $knowledge.addClass("collapsed");
            }
        }
    });
}

$(function () {

    var modelDataset = document.getElementById("Model").dataset;
    var model = {
        id: modelDataset.id,
        contentRoot: modelDataset.contentroot,
        scrollTop: modelDataset.scrolltop,
        themeScript: modelDataset.themescript
    };

    var rawContent = document.getElementById("rawContent").value;
    var contentRoot = model.contentRoot;
    var activitiesString = document.getElementById("activities").value;
    var activities = (activitiesString == null || activitiesString.length == 0) ? [] : JSON.parse(activitiesString);
    var activityGroupsString = document.getElementById("activityGroups").value;
    var activityGroups = (activityGroupsString == null || activityGroupsString.length == 0) ? [] : JSON.parse(activityGroupsString);
    var replacementTokensString = document.getElementById("replacementTokens").value;
    var replacementTokens = (replacementTokensString == null || replacementTokensString.length == 0) ? [] : JSON.parse(replacementTokensString);
    var replacementsString = document.getElementById("replacements").value;
    var replacements = (replacementsString == null || replacementsString.length == 0) ? [] : JSON.parse(replacementsString);
    var variablesString = document.getElementById("variables").value;
    var variables = (variablesString == null || variablesString.length == 0) ? {} : JSON.parse(variablesString);

    var processVariables = function () {
        $("span.variable").each(function () {
            var $this = $(this);
            var name = $this.attr("data-name");
            if (name in variables) {
                $this.html(variables[name]);
            } else {
                $this.text("<" + name + ">");
            }
        });
        $("input.variableTextBox, textarea.variableTextBox, select.variableDropDownList").each(function () {
            var $this = $(this);
            var name = $this.attr("data-name");
            if (name in variables) {
                $this.val(variables[name]);
            } else {
                $this.val("");
            }
        });
        $("code").each(function () {
            var originalHtml = this.originalHtml ? this.originalHtml : this.innerHTML;
            var newHtml = originalHtml;
            for (var name in variables) {
                var val = variables[name];
                var regex = new RegExp('<span class="nocode">&lt;' + name + '&gt;</span>', 'g');
                newHtml = newHtml.replace(regex, val);
            }
            if (originalHtml != newHtml || originalHtml != this.innerHTML) {
                this.originalHtml = originalHtml;
                this.innerHTML = newHtml;
            }
        });
        $(".display-by-variable").each(function () {
            var $element = $(this);
            var name = $element.attr("data-variable-name");
            var val = $element.attr("data-variable-value");
            if (name === val) {
                $element.show();
            } else if (name in variables && variables[name] === val) {
                $element.show();
            } else {
                $element.hide();
            }
        });
    };

    function customDomProcessing($page) {
        setupKnowledgeExpanders();
    }

    function variablesChanged() {
        processVariables();
        $("include.hasVariableUrl").each(function () {
            instructionsProcessor.processInclude($(this), contentRoot, customDomProcessing, activities, activityGroups, replacementTokens, variables, processVariables, replacements);
        });
    }
    instructionsProcessor.process(rawContent, "instructions", false, contentRoot, replacementTokens,
        customDomProcessing,
        activities,
        activityGroups,
        variables,
        processVariables,
        replacements
    );
    processVariables();
    $(".page").each(function () {
        var $page = $(this);
        if ($page.find("iframe.externalManual").length > 0) {
            $page.css("padding", 0);
        }
    });

    $("body").on("click", ".moreKnowledgeLink", function (e) {
        e.preventDefault();
        var $link = $(this);
        var $knowledge = $link.parent().prev();
        if ($knowledge.hasClass("expanded")) {
            $knowledge.removeClass("expanded");
            $link.text("more...");
        } else {
            $knowledge.addClass("expanded");
            $link.text("less...");
        }
    }).on("click", ".copyable, code:not(.nocopy)", function (e) {
        copyableClicked(this);
    }).on("click", ".dialogLink", function (e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        var $dialogLink = $(this);
        var title = $dialogLink.attr("title");
        var target = $dialogLink.attr("data-target");
        if (target) {
            var $hiddenDialog = $("blockquote.referenceContent[data-id='" + target + "']");
            if ($hiddenDialog.length === 0) {
                $ui.alert(`CONTENT ERROR: Unable to find a reference content "${target}"`);
            } else {
                showDialog({ title: title, content: $hiddenDialog.html() });
            }
        }
        else {
            showDialog({ title: title, url: $dialogLink.attr("href"), isInstructions: $dialogLink.hasClass("instructions") });
        }
    }).on("click", ".videoLink, video", function (e) {
        e.preventDefault();
        var videoUrl = $(this).hasClass("videoLink") ? this.href : this.src;
        var url = `/LabProfile/Video/${model.id}/?url=` + encodeURIComponent(videoUrl);
        if (this.title) {
            url += "&title=" + encodeURIComponent(this.title);
        }
        var videoWindow = window.open(url, "videoWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
        childWindows.push(videoWindow);
        try {
            videoWindow.focus();
        } catch (e) {

        }
    }).on("click", ".imageLink, img", function (e) {
        var $this = $(this);
        if ($this.parent().is("a")) return;
        e.preventDefault();
        e.stopImmediatePropagation();
        var imgUrl = $this.hasClass("imageLink") ? this.href : this.src;
        var url = `/LabProfile/Image/${model.id}/?url=` + encodeURIComponent(imgUrl);
        if (this.title) {
            url += "&title=" + encodeURIComponent(this.title);
        }
        if (this.alt || this.text) {
            url += "&altText=" + encodeURIComponent(this.alt ? this.alt : this.text);
        }
        var imageWindow = window.open(url, "imageWindow", "menubar=no,location=no,resizable=yes,scrollbars=yes,status=no");
        childWindows.push(imageWindow);
        try {
            imageWindow.focus();
        } catch (e) {

        }
    }).on("click", ".tipLink", function (e) {
        e.preventDefault();
        var $tiplink = $(this);
        var $hiddenTip = $tiplink.next();
        var offset = $(this).offset();
        var x = offset.left;
        var y = offset.top + 25;
        showClickFeedbackMessage($hiddenTip.html(), x, y, 5000);
    }).on("change", ".variableTextBox,.variableDropDownList", function () {
        var $textBox = $(this);
        var name = $textBox.attr("data-name");
        var val = $textBox.val();
        if (val == null || val.length == 0) {
            if (name in variables) {
                delete variables[name];
            }
        } else {
            variables[name] = val;
        }
        variablesChanged();
    });;

    $(window).resize(function () {
        setupKnowledgeExpanders();
    }).unload(function () {
        closeAllChildWindows();
    });

    function closeAllChildWindows() {
        for (var i = 0; i < childWindows.length; i++) {
            try {
                childWindows[i].close();
            } catch (e) {
            }
        }
        childWindows = [];
    }

    function showDialog(options) {
        if (!options) return;
        var $dialog = $("#modalDialog");
        var isUpdatedContent = false;
        if ($dialog.length > 0) {
            $dialog.find(".dialogContent").html("");
            $dialog.find(".dialogButtons").html("");
            isUpdatedContent = true;
        } else {
            var $dialog = $('<div id="modalDialog" class="dialog"><div class="dialogMask"></div><div class="dialogBox"><div class="dialogCloseButton" role="button" aria-label="Close" tabindex="0"></button><div class="dialogTitle"></div><div class="dialogContent"></div><div class="dialogButtons"></div></div></div>');
        }
        var $dialogBox = $dialog.find(".dialogBox");
        var close = function () {
            var h = $dialogBox.outerHeight();
            var offset = $dialogBox.offset();
            $dialogBox.css("marginTop", 0).animate({ marginTop: -h - offset.top }, 300);
            $dialog.delay(200).fadeOut("fast", function () { $dialog.remove(); });
        }
        $dialog.find(".dialogCloseButton").click(close);

        if (options.title) {
            $dialog.find(".dialogTitle").html(options.title).show();
        } else {
            $dialog.find(".dialogTitle").hide();
            $dialog.addClass("noTitle");
        }
        if (options.content) {
            $dialog.find(".dialogContent").removeClass("noScroll").append(options.content);
        } else if (options.url) {
            var urlLower = options.url.toLowerCase();
            if (urlLower.indexOf(".mp4") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<video src="' + options.url + '" controls autoplay></video>');
                var $video = $("#contentDialogVideo");
                try {
                    $video[0].play();
                } catch (e) {
                    //
                }
            } else if (urlLower.indexOf(".png") !== -1 || urlLower.indexOf(".jpg") !== -1 || urlLower.indexOf(".jpeg") !== -1 || urlLower.indexOf(".gif") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<img src="' + options.url + '" controls></iframe>');
            } else if (options.isInstructions || urlLower.indexOf(".md") !== -1) {
                $dialog.find(".dialogContent").removeClass("noScroll").append('<div id="instructionsDialog"></div>');
                window.setTimeout(function () {
                    instructionsProcessor.processUrl(options.url, "instructionsDialog");
                    if (options.url.indexOf("#") >= 0) {
                        window.setTimeout(function () {
                            var hash = options.url.substr(options.url.indexOf("#"));
                            var $element = $("#instructionsDialog " + hash);
                            if ($element.length > 0) {
                                $dialog.find(".dialogContent").scrollTop($element.position().top);
                            }
                        }, 400); //leave time for the content to layout... the dialog takes 400ms to animate anyway, which should be sufficient.
                    }
                }, 1);
            } else {
                $dialog.find(".dialogContent").addClass("noScroll").append('<iframe id="contentDialogIFrame" src="' + options.url + '" style="width:100%;height:100%;border:none;" allowfullscreen></iframe>');
            }
        } else {
            $dialog.find(".dialogContent").hide();
        }
        if (options.buttons && options.buttons.length > 0) {
            $dialog.addClass("hasButtons");
            var $dialogButtons = $dialog.find(".dialogButtons");
            var numButtons = options.buttons.length;
            for (var i = 0; i < numButtons; i++) {
                var button = options.buttons[i];
                var $button = $("<input type='button' value='" + button.text + "' aria-label='" + button.text + "' />");
                if (button.click) {
                    $button.click(button.click);
                }
                if (button.primary) {
                    $button.addClass("primary");
                }
                if (button.closeDialog) {
                    $button.click(close);
                }
                $dialogButtons.append($button);
            }
        }
        if (!isUpdatedContent) {
            $("body").append($dialog);
            $dialog.hide().fadeIn("fast", function () {
                if (options.open) {
                    options.open();
                }
            });
            var h = $dialogBox.outerHeight();
            var offset = $dialogBox.offset();
            $dialogBox.css("marginTop", -h - offset.top).animate({ marginTop: 0 }, 400);
        }
        return {
            close: close
        };
    }

    $(function () {
        if (model.scrollTop && !Number.isNaN(model.scrollTop)) {
            document.body.scrollTop = model.scrollTop;
        }

        function getScrollTop() {
            return document.body.scrollTop;
        }

        if (model.themeScript) {
            eval(model.themeScript);
        }
    });
});

